# This is a basic workflow to help you get started with Actions

name: Build FastDeploy Libraries

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the regression2 branch
on:
  push:
    branches: [ master ]

env:
  OPENCV_REF: 4.5.3
  FASTDEPLOY_VER: 1.0.0
  FASTDEPLOY_REF: 49061bfb1c6d235ced7489f7d5c02930bb3a2107

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-fastdeploy:

    strategy:
      matrix:
        os: [macos, ubuntu, windows]

    defaults:
      run:
        shell: bash
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc

      - name: Install Linux Packages
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake

      - uses: ilammy/msvc-dev-cmd@v1
        id: msvc-env
        if: runner.os == 'Windows'

      - name: Get specific version CMake, v3.24.3
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@v3.24.3

      - name: Download OpenCV
        uses: robinraju/release-downloader@v1.6
        with:
          repository: "aa889788/build-opencv"
          tag: ${{ env.OPENCV_REF }}
          fileName: OpenCV-${{ runner.os }}.tar.gz

      - name: Extract OpenCV
        run: |
          cd ${GITHUB_WORKSPACE}
          tar -zxvf OpenCV-${{ runner.os }}.tar.gz

      - name: Clone FastDeploy
        uses: actions/checkout@v3
        with:
          repository: PaddlePaddle/FastDeploy
          path: FastDeploy
          ref: ${{ env.FASTDEPLOY_REF }}

      - name: Setup MSVC environment
        if: runner.os == 'Windows'
        run: |
            echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            echo "CC=cl" >> $GITHUB_ENV
            echo "CXX=cl" >> $GITHUB_ENV
            echo "OpenCV=/lib" >> $GITHUB_ENV

      - name: Configure FastDeploy
        run: |
            cd ${GITHUB_WORKSPACE}/FastDeploy
            mkdir build && cd build
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DENABLE_ORT_BACKEND=ON \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/build/fastdeploy \
              -DENABLE_VISION=ON \
              -DOPENCV_DIRECTORY=${GITHUB_WORKSPACE}/opencv${OpenCV} \
              -DCMAKE_INSTALL_RPATH='$ORIGIN/:$ORIGIN/../third_libs/install/onnxruntime/lib:$ORIGIN/../third_libs/install/paddle2onnx/lib' \
              ..

      - name: Build FastDeploy
        run: |
            cd ${GITHUB_WORKSPACE}/FastDeploy/build
            cmake --build . --config Release --target install --parallel ${PARALLEL_JOBS:-$(nproc --all)}

      - name: Patch FastDeploy
        run: |
            cd ${GITHUB_WORKSPACE}/build/fastdeploy
            sed -i'' -e '/set(OPENCV_DIRECTORY/d' FastDeploy.cmake
            
      - name: Package FastDeploy
        run: |
            cd ${GITHUB_WORKSPACE}/build
            tar -czvf FastDeploy-${{ runner.os }}.tar.gz fastdeploy


      - name: Upload FastDeploy
        uses: actions/upload-artifact@v3
        with:
          name: fastdeploy-${{ runner.os }}
          path: build/FastDeploy-${{ runner.os }}.tar.gz


  upload-release:
    needs: build-fastdeploy
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v3
      
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${GITHUB_WORKSPACE}/release

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.FASTDEPLOY_VER }}
          files: |
            ${GITHUB_WORKSPACE}/release/*/*

